package com.capgemini.retailermaintenance.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.TypedQuery;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Repository;

import com.capgemini.retailermaintenance.dto.OrderBean;
import com.capgemini.retailermaintenance.dto.ProductBean;
import com.capgemini.retailermaintenance.dto.UserBean;
import com.capgemini.retailermaintenance.exception.CustomException;

@Repository
public class UserDAOImpl implements UserDAO {

	@PersistenceUnit
	private EntityManagerFactory entityManagerFactory;

	@Override
	public boolean createProfile(UserBean bean) {
		EntityManager entitymanager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction = entitymanager.getTransaction();
		transaction.begin();
		try {
			entitymanager.persist(bean);
			transaction.commit();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public UserBean login(String email, String password) {
		EntityManager entitymanager = entityManagerFactory.createEntityManager();
		String jpql = "from UserBean where email=:email";
		TypedQuery<UserBean> query = entitymanager.createQuery(jpql, UserBean.class);
		query.setParameter("email", email);
		// query.setParameter("password", password);
		try {
			UserBean bean = query.getSingleResult();
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			if (encoder.matches(password, bean.getPassword())) {
				return bean;
			} else {
				throw new CustomException("Password invalid");
			}
		} catch (Exception e) {
			throw new CustomException("Email invalid");
		}
	}

	@Override
	public ProductBean getProduct(int productId) {
		String jpql = "from ProductBean where productId=:productId";
		EntityManager entitymanager = entityManagerFactory.createEntityManager();
		TypedQuery<ProductBean> query = entitymanager.createQuery(jpql,ProductBean.class);
		query.setParameter("productId", productId);
		try {
			return query.getSingleResult();
		} 
		catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean updatePassword(int userId, String password) {
		EntityManager entitymanager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction = entitymanager.getTransaction();
		transaction.begin();
		UserBean bean = entitymanager.find(UserBean.class, userId);
		bean.setPassword(password);
		transaction.commit();
		return true;
	}

	@Override
	public List<OrderBean> getOrders(int userId) {
		
		return null;
	}

}
